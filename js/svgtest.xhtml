<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html 
      PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">

<head>

<style type="text/css">
*.place      { }
*.transition { }
*.arc        { }

#svg         { float: left }
div#viewer   { float: right; margin: 10px; border: solid 1px blue; 
               height: 24em; width: 12em; overflow: scroll }
div#messages { clear: both; margin: 10px; border: solid 1px blue; 
               height: 10em; overflow: scroll }
</style>

<script type="text/javascript" src="debug.js"/>
<script type="text/javascript" src="vector.js"/>
<script type="text/javascript" src="net.js"/>
<script type="text/javascript"><![CDATA[
function initNet() {
  // wrap(Place.prototype,'mousedownHandler');
  // wrap(Place.prototype,'mouseupHandler');
  // wrap(window,'patchStyle',{'before':function(x) { message('before '+x.id); }});

  /*
  var events = [];
  wrap(Element.prototype,'addEventListener', // TODO: doesn't work in firefox!
    {'before':function(e,l,c) { 
                message('aEL '+this+(this.id?this.id:'')+' '+e);
                }
    ,'around':function(aEL,e,l,c) { 
                events[e]++;
                return aEL.apply(this,[e,l,c]);
                }
    });
  wrap(Element.prototype,'removeEventListener',
    {'after':function(e,l,c) { 
                message('rEL '+this+(this.id?this.id:'')+' '+e);
                }
    });
  */

  var net  = new Net('net',5000,3000);

  /*
  var xhr = new XMLHttpRequest(); // browser-specific
  message(xhr);
  xhr.open('GET','file:c:/private/archive/pnml/desel-esparza-5-2.pnml',false);
  xhr.send(null);
  var pnml = xhr.responseXML;
  message(pnml);
  net.fromPNML(pnml);
  message(xhr.responseText);
  */

  var in1  = net.addPlace('in1' , 1000, 1000);
  var in2  = net.addPlace('in2' , 1000, 2000);
  var t1   = net.addTransition('t1',2000,1500);
  var out1 = net.addPlace('out1', 3000, 1000);
  var out2 = net.addPlace('out2', 3000, 2000);

  var a1 = net.addArc(in1,t1);
  var a2 = net.addArc(in2,t1);
  var a3 = net.addArc(t1,out1);
  var a4 = net.addArc(t1,out2);

  // net.removeArc(a2);
  // net.removePlace(out1);
  // net.removeTransition(t1);

  net.toPNML();

  document.body.insertBefore(net.svg,document.body.firstChild);
  var fileInput = document.createElement('input');
  fileInput.type  = 'file';
  fileInput.name  = 'load PNML'; // TODO: visualize input field purpose
  fileInput.id    = 'fileInput';
  fileInput.style.width = '100%';
  fileInput.addEventListener('change',function(){
      if (document.implementation && document.implementation.createDocument) {
        var pnml = document.implementation.createDocument(null,null,null);
        pnml.async = false;
        var filename = 'pnml/'+this.value.replace(/^C:[\/\\]fake_path[\/\\]/,'');
        pnml.load(filename);
        net.removeAll();
        net.fromPNML(pnml,4,100);
      } else
        message('sorry, cannot load');
    },false);
  document.body.insertBefore(fileInput,net.svg);

  var ls = net.toString().split("\n");
  for (var l in ls) message(ls[l]);

  /*
  message('listeners have been registered for these events:');
  for (var ex in events) {
    message(ex);
    (function (ex) { // separate ex value from loop index
      document.documentElement.addEventListener(ex,function(event) {
        message(ex+event);
      },true); }(ex));
  }
  */

}

]]></script>

</head>

<body onload="initNet();JSEval('messages');ObjectViewer('viewer');">

<div id='viewer'/>
<div id='messages'/>

</body>

</html>
